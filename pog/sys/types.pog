//
// Copyright (c) 2022, Brian Frank
// Licensed under the Academic Free License version 3.0
//
// History:
//   2 May 2022  Brian Frank  Creation
//

// Root type for all objects
Obj : <
  // Documentation for object
  doc: Str "Root type for all objects"

  // Indicates this object is optional in its parent type
  optional: Marker
>

// None is the bottom type with no values
None : Obj

// Marker labels a dict with typing information
Marker : Obj

// Data value type
Val : Obj

// Scalar is an atomic value kind
Scalar : Val <
  pattern: Str?  // Regex pattern that string encoding must match
>

// Closed enumerated choice
Enum : Obj

// Boolean value either true or false
Bool : Enum {
  true    // Boolean true value
  false   // Boolean false value
}

// Integer or floating point numbers annotated with an optional unit
Number : Scalar <
  minVal: Number?   // Inclusive minimum value
  maxVal: Number?   // Inclusive maximum value
>

// Unitless integer number
Int : Number

// Unitless floating point number
Float : Number

// Number with a unit of time
Duration : Number

// Unicode string of characters
Str : Scalar

// Reference to another object.  The value must be either a
// dotted qualified name or an id value prefixed with "@".
Ref : Scalar <
  of: Obj   // Item type for referent
  pattern: "[a-zA-Z\\d\\._~]*"
>

// Version string formatted as decimal digits separated by a dot
Version : Scalar

// Universal resource identifier
Uri : Scalar

// ISO 8601 date as year, month, day: '2011-06-07'
Date : Scalar <
  pattern: "\\d\\d\\d\\d-\\d\\d-\\d\\d"
>

// ISO 8601 time as hour, minute, seconds: '09:51:27.354'
Time : Scalar

// ISO 8601 timestamp followed by timezone identifier
DateTime : Scalar

// Collection type
Collection : Val

// Ordered list of zero or more values
List : Collection <
  of: Obj    // Item type for list
>

// Hashmap of name/value tag pairs
Dict : Collection <
  of: Obj    // Item type for dict values
> {
  id: Ref?   // Unique identifier within graph for the object
}

// Maybe is the option type.  It contains some value or None.
Maybe : Collection <
  of: Obj   // Optional value
>

// Or type is a choice between one of multiple types.
// It is a union of the set of types.
Or : Collection <
  of: List   // List of choices
>

// And type is a combination of multiple types.
// It is an intersection of the set of types.
And : Collection <
  of: List   // List of types to combine
>





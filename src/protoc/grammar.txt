//
// Copyright (c) 2022, Brian Frank
// Licensed under the Academic Free License version 3.0
//
// History:
//   2 Aug 2022  Brian Frank  Creation
//


Productions [#productions]
**************************

  <file>             :=  <pragma> <protos>
  <pragma>           :=  "#<" <protos> ">"
  <protos>           :=  [<proto> <endOfProto>]*
  <endOfProto>       :=  ( [","] <nl> ) | ","

  <proto>            :=  [<leadingDoc>] <protoUnion> [<trailingDoc>]
  <protoUnion>       :=  <protoIntersction> ["|" <protoIntersction>]*
  <protoIntersction> :=  <protoSimple> ["&" <protoSimple>]*
  <protoSimple>      :=  <protoMarker> | <protoNamed> | <protoUnnamed>
  <protoMarker>      :=  <markerName>
  <protoNamed>       :=  <qname> ":" <protoUnnamed>
  <protoUnnamed>     :=  [<protoType>] [<protoMeta>] [<protoData>] [<protoVal>] // must have at least one of these productions
  <protoType>        :=  <protoMaybeType> | <protoTypeName>
  <protoMaybe>       :=  <protoTypeName> "?"
  <protoTypeName>    :=  <qname>
  <protoMeta>        :=  "<" <protos> ">"
  <protoData>        :=  "{" <protos> "}"
  <protoVal>         :=  double quoted string literal

  <leadingDoc>       := (<lineComment>)*
  <trailingDoc>      := <lineComment>

  <qname>            :=  <name> ("." <name>)*
  <name>             :=  <alpha> (<nameRest>)*
  <markerName>       :=  <alphaLower> (<nameRest>)*
  <nameRest>         :=  alpha | digit | '_'
  <alpha>            :=  alphaLower | alphaUpper
  <alphaLower>       :=  'a' - 'z'
  <alphaUpper>       :=  'A' - 'Z'
  <digit>            :=  '0' - '9'

Legend [#legend]
****************
Legend for BNF Grammar:
  :=      is defined as
  <x>     non-terminal
  "x"     literal
  'x'     char literal
  [x]     optional
  (x)     grouping
  s-e     inclusive char range
  x*      zero or more times
  x|x     or




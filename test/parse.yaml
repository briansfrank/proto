#
# Parse: pog source -> unresolved AST JSON
#

---
name: markerOnly
test: parse src, verify json
src: |
  foo
json: |
  {"foo":{"_is":"sys.Marker"}}
---
name: nameAndIs
test: parse src, verify json
src: |
  foo: Str
json: |
  {"foo":{"_is":"Str"}}
---
name: nameAndQualIs
test: parse src, verify json
src: |
  foo: bar.baz.Elem
json: |
  {"foo":{"_is":"bar.baz.Elem"}}
---
name: scalarOnly
test: parse src, verify json
src: |
  foo: "scalar"
json: |
  {"foo":{"_val":"scalar"}}
---
name: scalarAndIs
test: parse src, verify json
src: |
  foo: Date "2022-12-20"
json: |
  {"foo":{"_is":"Date", "_val":"2022-12-20"}}
---
name: scalarAndQualIs
test: parse src, verify json
src: |
  foo: baz.ui.Color "green"
json: |
  {"foo":{"_is":"baz.ui.Color", "_val":"green"}}
---
name: children0
test: parse src, verify json
src: |
  foo: {}
json: |
  {"foo":{}}
---
name: children1ScalarOnly
test: parse src, verify json
src: |
  foo: {b:"beta"}
json: |
  {"foo":{"b":{"_val":"beta"}}}
---
name: children1ScalarAndIs
test: parse src, verify json
src: |
  foo  :  {  b  :  Color "blue" }
json: |
  {"foo":{"b":{"_is":"Color", "_val":"blue"}}}
---
name: children1ScalarAndQualIs
test: parse src, verify json
src: |
  foo :  {
    b:  graphics.Color "blue"
  }
json: |
  {"foo":{"b":{"_is":"graphics.Color", "_val":"blue"}}}
---
name: children2ScalarsComma
test: parse src, verify json
src: |
  foo: {a:"Alpha", b:"Bravo"}
json: |
  {"foo":{
    "a":{"_val":"Alpha"},
    "b":{"_val":"Bravo"}
  }}
---
name: children2ScalarsCommaTrailing
test: parse src, verify json
src: |
  foo: {a:"Alpha", b:"Bravo",}
json: |
  {"foo":{
    "a":{"_val":"Alpha"},
    "b":{"_val":"Bravo"}
  }}
---
name: children2ScalarsNewline
test: parse src, verify json
src: |
  foo: {
    a:"Alpha"
    b:"Bravo"
  }
json: |
  {"foo":{
    "a":{"_val":"Alpha"},
    "b":{"_val":"Bravo"}
  }}
---
name: children2ScalarsCommaAndNewline
test: parse src, verify json
src: |
  foo: {
    a:"Alpha",
    b:"Bravo",
  }
json: |
  {"foo":{
    "a":{"_val":"Alpha"},
    "b":{"_val":"Bravo"}
  }}
---
name: children2ScalarsCommaAndWhitespace
test: parse src, verify json
src: |
  foo:  {

    a  :  "Alpha",

    b : "Bravo"  ,

  }
json: |
  {"foo":{
    "a":{"_val":"Alpha"},
    "b":{"_val":"Bravo"}
  }}
---
name: children3MixedScalars
test: parse src, verify json
src: |
  foo: {
    a: "Alpha",
    b: Color "#FFF"
    c: sys.Date "2022-12-20"
  }
json: |
  {"foo":{
    "a":{"_val":"Alpha"},
    "b":{"_is":"Color", "_val":"#FFF"},
    "c":{"_is":"sys.Date", "_val":"2022-12-20"}
  }}
---
name: childrenAndIs
test: parse src, verify json
src: |
  foo: Person {
    name: "Brian",
    age: Int "40"
  }
json: |
  {"foo":{
    "_is":"Person",
    "name":{"_val":"Brian"},
    "age":{"_is":"Int", "_val":"40"}
  }}
---
name: childrenAndQualIs
test: parse src, verify json
src: |
  foo:some.lib.Person{name: "Brian",age: Int "40"}
json: |
  {"foo":{
    "_is":"some.lib.Person",
    "name":{"_val":"Brian"},
    "age":{"_is":"Int", "_val":"40"}
  }}
---
name: metaOnly
test: parse src, verify json
src: |
  foo: <markIt>
json: |
  {"foo":{"_markIt":{"_is":"sys.Marker"}}}
---
name: metaScalar
test: parse src, verify json
src: |
  foo: Int<minVal:"100">"123"
json: |
  {"foo":{"_is":"Int", "_val":"123", "_minVal":{"_val":"100"}}}
---
name: metaScalar2
test: parse src, verify json
src: |
  foo: Int<abstract, minVal:"100">"123"
json: |
  {"foo":{"_is":"Int", "_val":"123", "_abstract":{"_is":"sys.Marker"}, "_minVal":{"_val":"100"}}}
---
name: metaAndChildrenMarkers
test: parse src, verify json
src: |
  foo: <metaMarker> {childMarker}
json: |
  {"foo":{
    "_metaMarker":{"_is":"sys.Marker"},
    "childMarker":{"_is":"sys.Marker"}
  }}
---
name: metaAndChildren
test: parse src, verify json
src: |
  foo: <a:"Meta-A"> {b:"Child-B"}
json: |
  {"foo":{
    "_a":{"_val":"Meta-A"},
    "b":{"_val":"Child-B"}
  }}
---
name: everything1
test: parse src, verify json
src: |
  foo: Person <concrete> {
    nick:"Brian"
    full: Full { first:"B", last:"F" }
    age: sys.Int "10"
    where: Place
    addr: {street:"100 Main", city:"Richmond", post:{code:"12345"}}
  }
json: |
  {"foo":{
    "_is":"Person",
    "_concrete":{"_is":"sys.Marker"},
    "nick":{"_val":"Brian"},
    "full":{
      "_is":"Full",
      "first":{"_val":"B"},
      "last":{"_val":"F"}
    },
    "age":{"_is":"sys.Int", "_val":"10"},
    "where":{"_is":"Place"},
    "addr":{
      "street":{"_val":"100 Main"},
      "city":{"_val":"Richmond"},
      "post":{"code":{"_val":"12345"}}
    }
  }}
---

##########################################################################
## Doc Comments
##########################################################################

---
name: docPre
test: parse src, verify json
src: |
  // Single line
  Foo: {}

  // Double line
  // 2nd one
  Bar: {}
json: |
  {
    "Foo":{"_doc":{"_is":"sys.Str", "_val":"Single line"}},
    "Bar":{"_doc":{"_is":"sys.Str", "_val":"Double line\n2nd one"}}
  }
---
name: docPost
test: parse src, verify json
src: |
  Foo: {}  // Post Foo
  Bar: {
     marker    // Post foo
     baz: ""   // Post baz

     // This trumps
     qux: ""  // nope
  }
json: |
  {
    "Foo":{"_doc":{"_is":"sys.Str", "_val":"Post Foo"}},
    "Bar":{
      "marker":{
        "_is":"sys.Marker",
        "_doc":{"_is":"sys.Str", "_val":"Post foo"}
      },
      "baz":{"_val":"", "_doc":{"_is":"sys.Str", "_val":"Post baz"}},
      "qux":{"_val":"", "_doc":{"_is":"sys.Str", "_val":"This trumps"}}
    }
  }
---

##########################################################################
## Maybe
##########################################################################

---
name: maybe
test: parse src, verify json
src: |
  a: Foo?
json: |
  {"a":{
    "_is":"sys.Maybe",
    "_of":{"_is":"Foo"}
  }}
---
name: maybeQual
test: parse src, verify json
src: |
  a: some.lib.Foo?
json: |
  {"a":{
    "_is":"sys.Maybe",
    "_of":{"_is":"some.lib.Foo"}
  }}
---

##########################################################################
## And
##########################################################################

---
name: and2
test: parse src, verify json
src: |
  a:Foo&Bar
json: |
  {"a":{
    "_is":"sys.And",
    "_of":{
      "_0":{"_is":"Foo"},
      "_1":{"_is":"Bar"}
    }
  }}
---
name: andQual2
test: parse src, verify json
src: |
  a:alpha.Foo&beta.gamma.Bar
json: |
  {"a":{
    "_is":"sys.And",
    "_of":{
      "_0":{"_is":"alpha.Foo"},
      "_1":{"_is":"beta.gamma.Bar"}
    }
  }}
---
name: andMixed3
test: parse src, verify json
src: |
  a: Foo & some.lib.Bar & Baz
json: |
  {"a":{
    "_is":"sys.And",
    "_of":{
      "_0":{"_is":"Foo"},
      "_1":{"_is":"some.lib.Bar"},
      "_2":{"_is":"Baz"}
    }
  }}
---
name: andNewlines
test: parse src, verify json
src: |
  a: Foo &
     some.lib.Bar &
     Baz
json: |
  {"a":{
    "_is":"sys.And",
    "_of":{
      "_0":{"_is":"Foo"},
      "_1":{"_is":"some.lib.Bar"},
      "_2":{"_is":"Baz"}
    }
  }}
---

##########################################################################
## Or
##########################################################################

---
name: or2
test: parse src, verify json
src: |
  a:Foo|Bar
json: |
  {"a":{
    "_is":"sys.Or",
    "_of":{
      "_0":{"_is":"Foo"},
      "_1":{"_is":"Bar"}
    }
  }}
---
name: orQual2
test: parse src, verify json
src: |
  a:alpha.Foo|beta.gamma.Bar
json: |
  {"a":{
    "_is":"sys.Or",
    "_of":{
      "_0":{"_is":"alpha.Foo"},
      "_1":{"_is":"beta.gamma.Bar"}
    }
  }}
---
name: orMixed3
test: parse src, verify json
src: |
  a: Foo | some.lib.Bar | Baz
json: |
  {"a":{
    "_is":"sys.Or",
    "_of":{
      "_0":{"_is":"Foo"},
      "_1":{"_is":"some.lib.Bar"},
      "_2":{"_is":"Baz"}
    }
  }}
---
name: orNewlines
test: parse src, verify json
src: |
  a: Foo |
     some.lib.Bar |
     Baz
json: |
  {"a":{
    "_is":"sys.Or",
    "_of":{
      "_0":{"_is":"Foo"},
      "_1":{"_is":"some.lib.Bar"},
      "_2":{"_is":"Baz"}
    }
  }}
---
name: orScalars
test: parse src, verify json
src: |
  vals: "foo" | "bar"
  mix1: Date | "nil" | Str
  mix2: "nil" | Date
json: |
  {
    "vals":{
      "_is":"sys.Or",
      "_of":{
        "_0":{"_val":"foo"},
        "_1":{"_val":"bar"}
      }
    },
    "mix1":{
      "_is":"sys.Or",
      "_of":{
        "_0":{"_is":"Date"},
        "_1":{"_val":"nil"},
        "_2":{"_is":"Str"}
      }
    },
    "mix2":{
      "_is":"sys.Or",
      "_of":{
        "_0":{"_val":"nil"},
        "_1":{"_is":"Date"}
      }
    }
  }
---

##########################################################################
## Roots
##########################################################################

---
name: rootDict
test: parse src, verify json
src: |
  { dis:"hi" }
json: |
  {"dis":{"_val":"hi"}}
---
name: rootList
test: parse src, verify json
src: |
  List { "a", "b" }
json: |
  {
    "_is":"List",
    "_0":{"_val":"a"},
    "_1":{"_val":"b"}
  }
---

##########################################################################
## Errs
##########################################################################

---
name: errsEndStr
test: parse src, verify events
src: |
  a: "xxx
events: |
  level ; msg
  err   ; Unexpected end of string literal
---
name: errsEscape
test: parse src, verify events
src: |
  a: "x\x
events: |
  level ; msg
  err   ; Invalid escape sequence
---
name: errsSymbol
test: parse src, verify events
src: |
  a: ^
events: |
  level ; msg
  err   ; Unexpected symbol: '^' (0x5e)
---
name: errsQName
test: parse src, verify events
src: |
  a: foo.{
events: |
  level ; msg
  err   ; Expected identifier not '{' lbrace
---
name: errsBody
test: parse src, verify events
src: |
  a: ,
events: |
  level ; msg
  err   ; Expecting proto body not ',' comma
---
name: errEnd
test: parse src, verify events
src: |
  a: b c
events: |
  level ; msg
  err   ; Expecting end of proto: comma or newline, not identifier "c"
---
name: errsAnd
test: parse src, verify events
src: |
  a: Foo &
events: |
  level ; msg
  err   ; Expecting next proto name after '&' and symbol
---
name: errsOr
test: parse src, verify events
src: |
  a: Foo |
events: |
  level ; msg
  err   ; Expecting next proto name after '|' or symbol
---
name: errsEndBrace
test: parse src, verify events
src: |
  a: {
events: |
  level ; msg
  err   ; Unexpected end of file, missing closing '}' rbrace
---
name: errsEndBrace
test: parse src, verify events
src: |
  a: <
events: |
  level ; msg
  err   ; Unexpected end of file, missing closing '>' gt
---





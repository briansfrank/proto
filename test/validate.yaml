#
# Validate pog src and check events
#

##########################################################################
## Sealed
##########################################################################

---
name: sealed
test: compile src base:base, verify events
base: test
src: |
  Foo: {
    ok1: Obj
    ok2: None
    ok3: Marker
  }
  Err1 : Obj
  Err2 : None
  Err3 : Marker
  Err4 : Maybe
  Err5 : And
  Err6 : Or
events: |
  level | qname     | msg
  err   | test.Err1 | Cannot extend sealed type 'sys.Obj'
  err   | test.Err2 | Cannot extend sealed type 'sys.None'
  err   | test.Err3 | Cannot extend sealed type 'sys.Marker'
  err   | test.Err4 | Cannot extend sealed type 'sys.Maybe'
  err   | test.Err5 | Cannot extend sealed type 'sys.And'
  err   | test.Err6 | Cannot extend sealed type 'sys.Or'
---

##########################################################################
## Scalar Regex
##########################################################################

---
name: scalarDate
test: compile src base:base, verify events
base: test
src: |
  ok1: Date "2022-12-09"
  err1: Date "2023.12.09"
events: |
  level | qname     | msg
  err   | test.err1 | Scalar does not match sys.Date pattern: "2023.12.09"
---
name: scalarTime
test: compile src base:base, verify events
base: test
src: |
  ok1: Time "23:10:03"
  ok2: Time "00:30:13.567"
  err1: Time "23.10.03"
  err2: Time "23:10"
  err3: Time "23:10:10."
events: |
  level | qname     | msg
  err   | test.err1 | Scalar does not match sys.Time pattern: "23.10.03"
  err   | test.err2 | Scalar does not match sys.Time pattern: "23:10"
  err   | test.err3 | Scalar does not match sys.Time pattern: "23:10:10."
---
name: scalarDateTime
test: compile src base:base, verify events
base: test
src: |
  ok1: DateTime "2000-01-01T00:00:00Z UTC"
  ok2: DateTime "2022-12-12T09:51:47-05:00 New_York"
  ok3: DateTime "2022-12-12T09:51:47.533-05:00 New_York"
  ok4: DateTime "2022-12-12T05:51:47.533-09:00 GMT+9"
  ok5: DateTime "2022-12-12T23:51:47.533+09:00 GMT-9"
  ok6: DateTime "2022-12-12T02:51:47.533-12:00 GMT+12"
  ok7: DateTime "2022-12-13T02:51:47.533+12:00 GMT-12"

  err1: DateTime "2000-01-01T00:00:00Z"
  err2: DateTime "2022-12-12 09:51:47-05:00 New_York"
  err3: DateTime "2022-12-12T09:51-05:00 New_York"
events: |
  level | qname     | msg
  err   | test.err1 | Scalar does not match sys.DateTime pattern: "2000-01-01T00:00:00Z"
  err   | test.err2 | Scalar does not match sys.DateTime pattern: "2022-12-12 09:51:47-05:00 New_York"
  err   | test.err3 | Scalar does not match sys.DateTime pattern: "2022-12-12T09:51-05:00 New_York"
---
name: scalarVersion
test: compile src base:base, verify events
base: test
src: |
  ok1: Version "3"
  ok2: Version "123"
  ok3: Version "1.22"
  ok4: Version "1.23.123"
  err1: Version "3x"
  err2: Version "3."
  err3: Version "3.4 x"
events: |
  level | qname     | msg
  err   | test.err1 | Scalar does not match sys.Version pattern: "3x"
  err   | test.err2 | Scalar does not match sys.Version pattern: "3."
  err   | test.err3 | Scalar does not match sys.Version pattern: "3.4 x"
---

##########################################################################
## Fits
##########################################################################

---
name: fitScalars
test: compile src base:base, verify events
base: test
src: |
  Foo: {
    date: Date
    num: Number
  }
  ok1: Foo {
    date: Date "2022-12-28"
    num: Int "123"
  }
  ok2: Foo {
    date: "2022-12-28"
    num: "123"
  }
  err1: Foo {
    date: Str "2022-12-28"
    num: Str "123"
  }
events: |
  level | qname          | msg
  err   | test.err1.date | Invalid type for 'test.Foo.date': 'sys.Str' does not fit 'test.Foo.date'
  err   | test.err1.num  | Invalid type for 'test.Foo.num': 'sys.Str' does not fit 'test.Foo.num'

